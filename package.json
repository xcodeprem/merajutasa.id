{
  "name": "merajutasa-governance",
  "version": "0.1.2",
  "type": "module",
  "private": true,
  "description": "Governance & integrity tooling (hash sealing, lint, fairness) for merajutasa.id",
  "license": "UNLICENSED",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "packageManager": "npm@9.8.1",
  "scripts": {
    "project:spotcheck": "node tools/github/project-spotcheck.js --owner=xcodeprem --repo=merajutasa.id",
    "project:sync": "node tools/github/project-sync-item.js",
    "project:token:diag": "node tools/github/project-token-diagnostics.js",
    "project:feature-release": "node tools/github/personal-projects-automation.js feature-release",
    "project:team-retrospective": "node tools/github/personal-projects-automation.js team-retrospective",
    "project:iterative-development": "node tools/github/personal-projects-automation.js iterative-development",
    "project:custom-fields": "node tools/github/personal-projects-automation.js custom-fields",
    "project:automation:all": "npm run project:feature-release && npm run project:team-retrospective && npm run project:iterative-development && npm run project:custom-fields",
    "lint": "npm run lint:md && npm run lint:dec && npm run lint:links",
    "lint:md": "markdownlint-cli2 \"**/*.md\"",
    "lint:dec": "node tools/dec-lint.js",
    "lint:disclaimers": "node tools/disclaimers-lint.js",
    "lint:imports": "node tools/import-dependency-check.js",
    "lint:links": "node tools/link-check.js",
    "docs:link-check": "node tools/link-check.js --verbose",
    "docs:link-check:index": "node tools/link-check.js --file=docs/index.md --verbose",
    "test": "npm run test:governance && npm run test:services && npm run test:infrastructure",
    "test:governance": "node tools/tests/policy-aggregation-threshold.test.js && node tools/tests/feedback-categories-ingestion.test.js && node tools/tests/evidence-bundle-prefix.test.js && node tools/tests/dec-canonical-hash-equivalence.test.js && node tools/tests/governance-verify.test.js && node tools/tests/spec-hash-diff.test.js && node tools/tests/param-integrity.test.js && node tools/tests/gap-analysis.test.js && node tools/tests/dec-lint.test.js && node tools/tests/json-stable.test.js && node tools/tests/check-actions-pinning.test.js && node tools/tests/post-config-verify.test.js",
    "test:services": "node tools/tests/services-integration.test.js && node tools/tests/privacy-tools.test.js && node tools/tests/evidence-validation.test.js && node tools/tests/lint-tools.test.js && node tools/tests/events-processing.test.js && node tools/tests/interface-mapping.test.js",
    "test:infrastructure": "node tools/tests/infrastructure-integration.test.js && node tools/tests/week6-component-imports.test.js && node tools/tests/week6-component-contracts.test.js && node tools/tests/week6-component-smoke.test.js && node tools/tests/infra-health-contract.test.js && node tools/tests/dependencies-matrix.test.js && node tools/tests/failure-impact-matrix.test.js && npm run infra:health:all",
    "test:all": "npm run test:governance && npm run test:services && npm run test:pii",
    "format": "echo 'Formatting tools not configured - using markdownlint for markdown'",
    "governance:check": "npm run governance:verify && ./.github/scripts/check-actions-pinning.sh && npm run schema:validate && node tools/validate-policy.js",
    "governance:verify": "node tools/governance-verify.js",
    "post-config:verify": "node tools/post-config-verify.js",
    "spec-hash:verify": "node tools/spec-hash-diff.js --mode=verify",
    "spec-hash:seal": "node tools/spec-hash-diff.js --mode=seal-first",
    "spec-hash:auto-seal-readme": "node tools/spec-hash-diff.js --mode=accept --include=README.md",
    "param:integrity": "node tools/param-integrity.js",
    "param:lock": "node tools/param-lock-verify.js",
    "evidence:validate": "node tools/validate-evidence.js",
    "evidence:bundle": "node tools/evidence-bundle.js",
    "evidence:collision": "node tools/evidence-collision-test.js",
    "docs:inventory": "node tools/docs-inventory.js",
    "component:inventory": "node tools/component-inventory-generator.js",
    "interface:mapping": "node tools/interface-mapping-generator.js",
    "failure:impact:matrix": "node tools/failure-impact-matrix-generator.js",
    "service:signer": "node tools/services/signer.js",
    "service:chain": "node tools/services/chain.js",
    "service:collector": "node tools/services/collector.js",
    "service:revocation": "node tools/services/revocation.js",
    "service:equity": "node tools/services/equity.js",
    "privacy:scan": "node tools/pii-scan.js --sarif",
    "privacy:metrics": "node tools/pii-metrics.js",
    "privacy:asserts": "node tools/privacy-asserts.js",
    "privacy:rights": "node infrastructure/compliance/privacy-rights-management.js --process-request",
    "privacy:request": "node infrastructure/compliance/privacy-rights-management.js --process-request",
    "privacy:report": "node infrastructure/compliance/privacy-rights-management.js --generate-report",
    "secrets:rotation:test": "node tools/secrets-rotation-test.js",
    "secrets:kek:rotate": "node tools/dev-kms-mock.js rotate",
    "fairness:generate-snapshots": "node tools/fairness/generate-equity-snapshots.js",
    "fairness:hysteresis-run": "node tools/fairness/hysteresis-engine.js",
    "fairness:sim": "node tools/fairness-sim.js",
    "fairness:engine": "node tools/fairness-engine-runtime.js",
    "fairness:metrics": "node tools/fairness/fairness-metrics.js",
    "equity:snapshot": "node tools/fairness/generate-equity-snapshots.js",
    "equity:anomaly": "node tools/equity-anomaly-detector.js",
    "equity:under-served": "node tools/derive-under-served-list.js",
    "equity:annotate": "node tools/equity-anomaly-annotate.js",
    "infra:nginx": "nginx -c $(pwd)/infrastructure/reverse-proxy/nginx.conf -g 'daemon off;'",
    "infra:generate-certs": "./infrastructure/reverse-proxy/generate-certs.sh",
    "infra:metrics": "node infrastructure/monitoring/metrics-collector.js",
    "infra:backup": "node infrastructure/backup/backup-service.js",
    "infra:backup:create": "node -e \"import('./infrastructure/backup/backup-service.js').then(m => m.default.initialize().then(() => m.default.createBackup()).then(console.log))\"",
    "infra:backup:list": "node -e \"import('./infrastructure/backup/backup-service.js').then(m => m.default.listBackups().then(b => console.log(JSON.stringify(b, null, 2))))\"",
    "infra:backup:cleanup": "node -e \"import('./infrastructure/backup/backup-service.js').then(m => m.default.cleanupOldBackups().then(console.log))\"",
    "infra:health:all": "node tools/infra/health-check-all.js",
    "infra:health:observability": "node tools/infra/health-check-all.js observability",
    "infra:health:performance": "node tools/infra/health-check-all.js performance",
    "infra:health:api-gateway": "node tools/infra/health-check-all.js api-gateway",
    "infra:health:high-availability": "node tools/infra/health-check-all.js high-availability",
    "infra:health:compliance": "node tools/infra/health-check-all.js compliance",
    "infra:health:security": "node tools/infra/health-check-all.js security",
    "infra:health:monitoring": "node tools/infra/health-check-all.js monitoring",
    "infra:health:integrations": "node tools/infra/health-check-all.js integrations",
    "infra:health:dependencies": "node tools/infra/health-check-all.js dependencies",
    "infra:container-k8s-verify": "node tools/infra/container-k8s-verify.js",
    "k8s:baseline:validate": "node tools/infra/k8s-baseline-validate.js",
    "infra:start-all": "concurrently \"npm run service:signer\" \"npm run service:chain\" \"npm run service:collector\" \"npm run infra:metrics\"",
    "docker:build-all": "./infrastructure/docker/scripts/build-all.sh",
    "docker:deploy-dev": "ENVIRONMENT=development ./infrastructure/docker/scripts/deploy-stack.sh deploy",
    "docker:deploy-prod": "ENVIRONMENT=production ./infrastructure/docker/scripts/deploy-stack.sh deploy",
    "docker:deploy-test": "ENVIRONMENT=test ./infrastructure/docker/scripts/deploy-stack.sh deploy",
    "docker:stop": "./infrastructure/docker/scripts/deploy-stack.sh stop",
    "docker:restart": "./infrastructure/docker/scripts/deploy-stack.sh restart",
    "docker:status": "./infrastructure/docker/scripts/deploy-stack.sh status",
    "docker:logs": "./infrastructure/docker/scripts/deploy-stack.sh logs",
    "docker:health-check": "./infrastructure/docker/scripts/health-check.sh",
    "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/ -R",
    "k8s:delete": "kubectl delete -f infrastructure/kubernetes/ -R",
    "k8s:status": "kubectl get pods,services,deployments -l app.kubernetes.io/part-of=merajutasa",
    "k8s:logs": "kubectl logs -l app.kubernetes.io/part-of=merajutasa --tail=100",
    "k8s:describe": "kubectl describe deployments,services,pods -l app.kubernetes.io/part-of=merajutasa",
    "performance:start": "concurrently \"npm run cache:redis-start\" \"npm run sla:monitor-start\" \"npm run performance:monitor\"",
    "performance:cache-demo": "node -e \"import('./infrastructure/performance/cache/cache-strategies.js').then(m => console.log('Cache demo - implement as needed'))\"",
    "performance:monitor": "node -e \"import('./infrastructure/performance/monitoring/performance-monitor.js').then(m => m.getPerformanceMonitor().startMonitoring?.() || console.log('Performance monitoring ready'))\"",
    "performance:health-check": "node -e \"Promise.all([import('./infrastructure/performance/cache/cache-strategies.js'), import('./infrastructure/performance/monitoring/sla-monitor.js')]).then(([cache, sla]) => Promise.all([cache.getCacheStrategies().healthCheck(), sla.getSLAMonitor().healthCheck()])).then(results => console.log('Health:', results))\"",
    "performance:report": "node -e \"import('./infrastructure/performance/monitoring/performance-monitor.js').then(m => m.getPerformanceMonitor().generatePerformanceReport?.().then(r => console.log('Report generated:', r?.timestamp)) || console.log('Performance report ready'))\"",
    "performance:benchmark": "node tools/performance-benchmark.js",
    "cache:redis-start": "echo 'Redis cache manager ready - configure Redis server if needed'",
    "cache:clear-all": "node -e \"import('./infrastructure/performance/cache/cache-strategies.js').then(m => m.getCacheStrategies().clear?.().then(() => console.log('All caches cleared')))\"",
    "sla:monitor-start": "node -e \"import('./infrastructure/performance/monitoring/sla-monitor.js').then(m => m.getSLAMonitor().startMonitoring?.() || console.log('SLA monitoring ready'))\"",
    "sla:status": "node tools/sla-status-cli.js",
    "sla:seed:healthy": "node tools/sla-seed-healthy.js",
    "observability:validate": "npm run observability:alerts:sim && npm run sla:seed:healthy && npm run sla:status",
    "observability:start": "node -e \"import('./infrastructure/observability/advanced-observability-system.js').then(m => m.initializeObservability('merajutasa-service')).then(() => console.log('Observability system started'))\"",
    "observability:health-check": "node -e \"import('./infrastructure/observability/advanced-observability-system.js').then(m => m.getAdvancedObservabilitySystem().getSystemStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "observability:benchmark": "node tools/observability-benchmark.js",
    "observability:export": "node -e \"import('./infrastructure/observability/advanced-observability-system.js').then(m => m.getAdvancedObservabilitySystem().exportObservabilityData().then(d => console.log(JSON.stringify(d, null, 2))))\"",
    "observability:alerts:sim": "node tools/observability-alerts-sim.js",
    "tracing:start": "node -e \"import('./infrastructure/observability/tracing/distributed-tracing.js').then(m => m.getDistributedTracing({ serviceName: 'merajutasa-service' }).healthCheck().then(h => console.log('Tracing:', h)))\"",
    "metrics:start": "node -e \"import('./infrastructure/observability/metrics/advanced-metrics-collector.js').then(m => m.getAdvancedMetricsCollector({ serviceName: 'merajutasa-service' }).healthCheck().then(h => console.log('Metrics:', h)))\"",
    "alerting:start": "node -e \"import('./infrastructure/observability/alerting/intelligent-alerting.js').then(m => m.getIntelligentAlertingSystem({ serviceName: 'merajutasa-service' }).healthCheck().then(h => console.log('Alerting:', h)))\"",
    "logs:start": "node -e \"import('./infrastructure/observability/logs/log-aggregation.js').then(m => m.getLogAggregationSystem({ serviceName: 'merajutasa-service' }).healthCheck().then(h => console.log('Logs:', h)))\"",
    "anomaly:start": "node -e \"import('./infrastructure/observability/anomaly/anomaly-detection.js').then(m => m.getAnomalyDetectionSystem({ serviceName: 'merajutasa-service' }).healthCheck().then(h => console.log('Anomaly Detection:', h)))\"",
    "dashboards:start": "node -e \"import('./infrastructure/observability/dashboards/real-time-dashboards.js').then(m => m.getRealTimeMonitoringDashboards({ serviceName: 'merajutasa-service', port: 3000 }).healthCheck().then(h => console.log('Dashboards:', h)))\"",
    "dashboards:open": "echo 'Opening dashboards at http://localhost:3000' && start http://localhost:3000 || open http://localhost:3000 || xdg-open http://localhost:3000",
    "api-gateway:start": "node -e \"import('./infrastructure/api-gateway/api-gateway-orchestrator.js').then(m => m.getAPIGatewayOrchestrator().start().then(() => console.log('API Gateway system started')))\"",
    "api-gateway:stop": "node -e \"import('./infrastructure/api-gateway/api-gateway-orchestrator.js').then(m => m.getAPIGatewayOrchestrator().stop().then(() => console.log('API Gateway system stopped')))\"",
    "api-gateway:status": "node -e \"import('./infrastructure/api-gateway/api-gateway-orchestrator.js').then(m => m.getAPIGatewayOrchestrator().getSystemStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "api-gateway:metrics": "node -e \"import('./infrastructure/api-gateway/api-gateway-orchestrator.js').then(m => m.getAPIGatewayOrchestrator().getUnifiedMetrics().then(m => console.log(JSON.stringify(m, null, 2))))\"",
    "service-mesh:health": "node -e \"import('./infrastructure/api-gateway/service-mesh.js').then(m => m.getServiceMesh().healthCheck().then(h => console.log('Service Mesh:', JSON.stringify(h, null, 2))))\"",
    "service-mesh:topology": "node -e \"import('./infrastructure/api-gateway/service-mesh.js').then(m => console.log('Service Topology:', JSON.stringify(m.getServiceMesh().getServiceTopology(), null, 2)))\"",
    "api-gateway:verify": "npm run api-gateway:start && node tools/api-gateway-verify.js",
    "service-mesh:health:artifact": "node -e \"import('./infrastructure/api-gateway/service-mesh.js').then(m => m.getServiceMesh().healthCheck().then(async (h) => { const fs = await import('fs'); await fs.promises.mkdir('artifacts', { recursive: true }); await fs.promises.writeFile('artifacts/service-mesh-health.json', JSON.stringify(h, null, 2)); console.log('Wrote artifacts/service-mesh-health.json'); }))\"",
    "ha:orchestrator-start": "node -e \"import('./infrastructure/high-availability/ha-orchestrator.js').then(m => m.getHighAvailabilityOrchestrator().initialize().then(() => console.log('HA Orchestrator started')))\"",
    "ha:orchestrator-status": "node -e \"import('./infrastructure/high-availability/ha-orchestrator.js').then(m => m.getHighAvailabilityOrchestrator().getSystemStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "ha:multi-region-deploy": "node -e \"import('./infrastructure/high-availability/multi-region-deployment.js').then(m => m.getMultiRegionDeployment().deployToRegions({strategy: 'blue-green', version: 'v1.0.0'}).then(d => console.log('Deployment:', d.id)))\"",
    "ha:disaster-recovery-backup": "node -e \"import('./infrastructure/high-availability/disaster-recovery.js').then(m => m.getDisasterRecoverySystem().createFullBackup().then(b => console.log('Backup:', b.id)))\"",
    "ha:auto-scaling-status": "node -e \"import('./infrastructure/high-availability/auto-scaling.js').then(m => m.getAutoScalingSystem().getScalingStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "ha:fault-tolerance-status": "node -e \"import('./infrastructure/high-availability/fault-tolerance.js').then(m => m.getFaultToleranceSystem().getFaultToleranceStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "ha:health-monitoring-status": "node -e \"import('./infrastructure/high-availability/health-monitoring.js').then(m => m.getHealthMonitoringSystem().getHealthStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "ha:emergency-response-test": "node -e \"console.log('Emergency response system ready - use ha:orchestrator-start to enable')\"",
    "ha:system-health": "node -e \"import('./infrastructure/high-availability/ha-orchestrator.js').then(m => m.getHighAvailabilityOrchestrator().healthCheck().then(h => console.log('System Health:', JSON.stringify(h, null, 2))))\"",
    "ha:policy:drift": "node tools/infra/ha-policy-drift-check.js",
    "ha:system-health:artifact": "node tools/infra/ha-system-health-artifact.js",
    "ha:start-all": "concurrently \"npm run ha:orchestrator-start\" \"npm run ha:health-monitoring-status\" \"npm run ha:auto-scaling-status\"",
    "ha:demo-full": "npm run week5:demo",
    "compliance:audit": "node infrastructure/compliance/audit-system.js --audit",
    "compliance:automation": "node infrastructure/compliance/compliance-automation.js",
    "compliance:orchestrator": "node infrastructure/compliance/compliance-orchestrator.js",
    "compliance:report": "node infrastructure/compliance/compliance-automation.js --generate-report",
    "security:hardening": "node infrastructure/security/enhanced/security-hardening.js",
    "security:scan": "node infrastructure/security/enhanced/security-hardening.js --scan",
    "security:threats": "node infrastructure/security/enhanced/security-hardening.js --detect-threats",
    "audit:start": "node infrastructure/compliance/audit-system.js --start",
    "audit:flush": "node infrastructure/compliance/audit-system.js --flush",
    "audit:report": "node infrastructure/compliance/audit-system.js --report",
    "week2:status": "node tools/phase2-week2-status.js",
    "week2:demo": "node tools/phase2-week2-demo.js",
    "week3:status": "node tools/phase2-week3-status.js",
    "week3:demo": "node tools/phase2-week3-demo.js",
    "week4:status": "node tools/phase2-week4-status.js",
    "week4:demo": "node tools/phase2-week4-demo.js",
    "week5:status": "node tools/phase2-week5-status.js",
    "week5:demo": "node tools/phase2-week5-demo.js",
    "week5:test": "node tools/phase2-week5-test.js",
    "week6:status": "node tools/phase2-week6-status.js",
    "week6:test": "node tools/phase2-week6-test.js",
    "week6:demo": "node tools/phase2-week6-demo.js",
    "phase1:status": "node tools/phase1-status.js",
    "phase1:demo": "node tools/phase1-status.js",
    "phase2:status": "node tools/phase2-status.js",
    "phase2:week1-demo": "node tools/phase2-week1-demo.js",
    "cicd:deploy": "node -e \"import('./infrastructure/cicd/pipeline-manager.js').then(m => m.getCICDManager().executePipeline({name: 'Development Deployment'}).then(r => console.log('Pipeline:', JSON.stringify(r, null, 2))))\"",
    "cicd:status": "node -e \"import('./infrastructure/cicd/pipeline-manager.js').then(m => m.getCICDManager().healthCheck().then(h => console.log('CI/CD:', JSON.stringify(h, null, 2))))\"",
    "docs:generate": "node -e \"import('./infrastructure/api-gateway/openapi-documentation.js').then(m => m.getOpenAPISystem().generateDocumentation().then(d => console.log('Documentation:', JSON.stringify(d, null, 2))))\"",
    "docs:summary": "node -e \"import('./infrastructure/api-gateway/openapi-documentation.js').then(m => console.log('Documentation Summary:', JSON.stringify(m.getOpenAPISystem().getDocumentationSummary(), null, 2)))\"",
    "gap:enhanced": "node tools/gap-analysis-enhanced.js",
    "phase:tracker": "node tools/generate-phase-tracker.js",
    "transparency:changelog": "node tools/changelog-excerpt-generate.js",
    "risk:digest": "node tools/risk-digest.js",
    "agent:trend": "node tools/agent-trend-summary.js",
    "pr:labels": "node tools/pr-label-advisor.js",
    "events:meta": "node tools/event-meta-validate.js",
    "events:validate": "node tools/event-validate.js --file data/events-sample.ndjson --rehash",
    "events:anchor": "node tools/event-anchor-chain.js",
    "events:pipeline:hash": "node tools/event-pipeline-hash.js",
    "events:seed": "node tools/seed-events.js",
    "feedback:smoke": "node tools/feedback-smoke.js",
    "feedback:monthly": "node tools/monthly-feedback-rollup.js",
    "collector:reliability": "node tools/collector-reliability-smoke.js",
    "policy:aggregation:verify": "node tools/policy-aggregation-threshold-verify.js",
    "policy:aggregation:enforce:allow": "node tools/policy-aggregation-threshold-enforce.js artifacts/aggregation-cells-allow.json",
    "policy:aggregation:enforce:deny": "node tools/policy-aggregation-threshold-enforce.js artifacts/aggregation-cells-deny.json",
    "policy:index:verify": "node tools/policy-index-verify.js",
    "governed:scan": "node tools/governed-change-scan.js",
    "dec:index": "node tools/generate-dec-index.js",
    "dec:new": "node tools/dec-template-create.cjs",
    "test:integrity": "node tools/tests/run-basic-integrity-tests.js",
    "test:fairness-unit": "node tools/tests/fairness-engine-unit-tests.js",
    "test:pii": "node tools/tests/pii-scan.test.js",
    "test:collector": "node tools/tests/collector-integration.test.js",
    "test:revocation-smoke": "node tools/tests/revocation-smoke.test.js",
    "test:week6-imports": "node tools/tests/week6-component-imports.test.js",
    "test:week6-contracts": "node tools/tests/week6-component-contracts.test.js",
    "test:week6-smoke": "node tools/tests/week6-component-smoke.test.js",
    "test:week6": "npm run test:week6-imports && npm run test:week6-contracts && npm run test:week6-smoke",
    "test:personal-projects": "node tools/tests/personal-projects-automation.test.js",
    "test:equity-smoke": "node tools/tests/equity-smoke.test.js",
    "test:equity-ui-smoke": "node tools/tests/equity-ui-smoke.test.js",
    "test:events-pipeline-hash": "node tools/tests/event-pipeline-hash.test.js",
    "test:event-taxonomy": "node tools/tests/event-taxonomy-consistency.test.js",
    "test:dec-hash": "node tools/tests/dec-canonical-hash-equivalence.test.js",
    "gen:test-vectors": "node tools/generate-test-vectors.js",
    "snapshot:artifacts": "node tools/snapshot-artifacts-baseline.js",
    "baseline:snapshot": "node tools/snapshot-governance-baseline.js",
    "queries:seeds": "node tools/query-seeds.js",
    "doc:verify-cli:stub": "node tools/write-verify-cli-stub.js",
    "schema:validate": "node tools/schema-validate.js",
    "hero:prerender": "node tools/hero-prerender.js",
    "h0:content": "npm run hero:prerender && npm run doc:verify-cli:stub",
    "verify:cli": "node tools/generate-test-vectors.js",
    "monitor:chain": "node tools/chain-monitor.js",
    "chain:reset:dev": "node tools/chain-reset-dev.js",
    "chain:append:spec-hash": "node tools/chain-append-spec-hash.js",
    "equity-ui-v2:dev": "cd public/equity-ui-v2 && npm run dev",
    "equity-ui-v2:build": "cd public/equity-ui-v2 && npm run build",
    "equity-ui-v2:preview": "cd public/equity-ui-v2 && npm run preview",
    "equity-ui-v2:install": "cd public/equity-ui-v2 && npm install",
    "h1:kpi": "node tools/generate-h1-kpi-summary.js",
    "h1:guard": "node tools/h1-verify-guard.js",
    "kpi:weekly": "node tools/weekly-trend-aggregator.js",
    "terms:adoption": "node tools/terminology-adoption.js",
    "terms:trend": "node tools/terminology-adoption-trend.js",
    "perf:budget": "node tools/perf-budget-smoke.js",
    "a11y:smoke": "node tools/a11y-smoke.js",
    "changelog:presence": "node tools/changelog-presence-check.js",
    "gate:1": "node tools/gate1-verify.js",
    "gate:2": "node tools/gate2-verify.js",
    "gate:3": "node tools/gate3-verify.js",
    "pipeline:credential": "node tools/pipeline-runner.js",
    "week6:validate": "npm run test:week6 && node infrastructure/compliance/compliance-orchestrator.js --once",
    "week6:health-check": "node -e \"import('./tools/phase2-week6-status.js').then(m => m.runWeek6Demo())\"",
    "week6:integration-test": "npm run compliance:audit && npm run security:scan && npm run privacy:rights",
    "week6:components-status": "node tools/integrated-health-check.js auditSystem complianceAutomation securityHardening privacyRights complianceOrchestrator",
    "week6:full-health": "node tools/integrated-health-check.js",
    "week6:dependency-check": "npm run lint:imports && npm run test:week6-imports",
    "week6:smoke-test": "npm run test:week6-smoke",
    "week6:integration-flow": "npm run week6:dependency-check && npm run week6:components-status && npm run week6:smoke-test",
    "compliance:start-all": "concurrently \"npm run compliance:orchestrator\" \"npm run security:hardening\" \"npm run audit:start\"",
    "security:monitor": "npm run security:hardening && npm run security:threats",
    "privacy:validate": "npm run privacy:rights && npm run privacy:request && npm run privacy:report",
    "health:check": "node tools/integrated-health-check.js",
    "health:core": "node tools/integrated-health-check.js signer chain collector fileSystem",
    "health:week6": "node tools/integrated-health-check.js auditSystem complianceAutomation securityHardening privacyRights complianceOrchestrator",
    "health:infra": "node tools/integrated-health-check.js haOrchestrator observability apiGateway performance",
    "health:full": "npm run health:check",
    "startup:order": "node -e \"import('./tools/integrated-health-check.js').then(m => { const checker = new m.IntegratedHealthChecker(); const report = { system_dependencies: checker.generateDependencyGraph() }; console.log('🚀 STARTUP ORDER:'); report.system_dependencies.startup_order.forEach(p => console.log('Phase ' + p.phase + ': ' + p.components.join(', ') + ' - ' + p.description)); })\"",
    "scripts:validate": "node tools/scripts-validator.js",
    "scripts:analyze": "node tools/scripts-inventory.js",
    "scripts:organize": "node tools/organize-scripts.js",
    "scripts:docs-metrics": "node scripts/calculate-docs-metrics.js",
    "deps:graph": "node --loader ts-node/esm scripts/deps/generate-graph.ts",
    "deps:check": "node --loader ts-node/esm scripts/deps/check-cycles.ts",
    "deps:matrix": "node tools/dependencies-matrix-generator.js",
    "deps:svg": "node scripts/deps/export-svg.js",
    "deps:all": "npm run deps:graph && npm run deps:matrix && npm run deps:svg",
    "compliance:assess": "node tools/compliance-assessment.js",
    "compliance:orchestrator:test": "node tools/compliance-orchestrator-test.js",
    "privacy:request:simulate": "node tools/privacy-request-simulator.js",
    "phase2:week6:verify": "npm run week6:validate && npm run compliance:assess && npm run security:scan && npm run privacy:request:simulate",
    "sanity:check": "node tools/sanity-check-all.js",
    "sanity:check:all": "node tools/sanity-check-all.js",
    "validation:playbook": "./scripts/run-validation-playbook.sh",
    "deps:drift:check": "node tools/dependency-drift-detector.js",
    "boot:sequence:validate": "node tools/boot-sequence-validator.js",
  "ci:dependency-drift": "npm run governance:verify && npm run deps:drift:check && npm run boot:sequence:validate",
  "scan:osv": "osv-scanner -r . --skip-git -o osv-results.json || true",
  "scan:osv:enforce": "node tools/enforce-osv.js",
  "scan:semgrep": "semgrep --config p/ci --sarif --output semgrep-results.sarif.json || true",
  "scan:semgrep:enforce": "node tools/enforce-semgrep.js",
  "scan:trivy:fs": "trivy fs --format json --output trivy-fs.json --severity HIGH,CRITICAL . || true",
  "scan:trivy:image": "trivy image --format json --output trivy-image.json --severity HIGH,CRITICAL local/merajutasa:ci || true",
  "scan:trivy:enforce": "node tools/trivy-enforce.js"
  },
  "devDependencies": {
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "chrome-launcher": "^1.0.0",
    "glob": "^11.0.3",
    "lighthouse": "^12.0.0",
    "markdownlint": "^0.38.0",
    "markdownlint-cli2": "^0.18.1",
    "pa11y": "^9.0.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "@octokit/graphql": "^9.0.1",
    "@octokit/rest": "^22.0.0",
    "compression": "^1.7.4",
    "concurrently": "^9.2.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "http-proxy-middleware": "^3.0.5",
    "ioredis": "^5.3.2",
    "node-cache": "^5.1.2",
    "uuid": "^11.1.0",
    "yaml": "^2.8.1"
  }
}