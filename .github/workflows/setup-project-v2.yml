name: Setup Project V2

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'User/Org owner (contoh: Andhika-Rey)'
        required: true
        default: 'Andhika-Rey'
      project_title:
        description: 'Judul Project'
        required: true
        default: 'MerajutASA Program'
      public:
        description: 'Public? (true/false)'
        required: true
        default: 'false'

jobs:
  create-project:
    runs-on: ubuntu-latest
    steps:
      - name: Create Project V2 and fields
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }} # Classic PAT (repo, project)
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          # Alternatif (tidak disarankan untuk akun personal):
          # permissions di job + github-token: ${{ github.token }}
          script: |
            const ownerLogin = '${{ inputs.owner }}';
            const title = '${{ inputs.project_title }}';
            const isPublic = '${{ inputs.public }}' === 'true';

            // 1) Resolve owner (User/Org)
            let ownerId, existingProjects = [];
            try {
              const ownerResp = await github.graphql(`
                query($login: String!) {
                  repositoryOwner(login: $login) {
                    id
                    ... on User { projectsV2(first: 50) { nodes { id title url public } } }
                    ... on Organization { projectsV2(first: 50) { nodes { id title url public } } }
                  }
                }
              `, { login: ownerLogin });
              ownerId = ownerResp.repositoryOwner?.id;
              existingProjects = ownerResp.repositoryOwner?.projectsV2?.nodes || [];
            } catch (error) {
              core.setFailed(`Owner not found: ${ownerLogin} (${error.message})`);
              return;
            }
            if (!ownerId) { core.setFailed(`Owner not found: ${ownerLogin}`); return; }

            // 2) Idempotent project create
            let project = existingProjects.find(p => p.title === title);
            if (!project) {
              const createResp = await github.graphql(`
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: { ownerId: $ownerId, title: $title }) {
                    projectV2 { id number title url public }
                  }
                }
              `, { ownerId, title });
              project = createResp.createProjectV2.projectV2;
              console.log('Project created:', project.url);
            } else {
              console.log('Project exists:', project.url);
            }

            // 3) Update visibility (best-effort)
            try {
              if (typeof project.public === 'boolean' && project.public !== isPublic) {
                await github.graphql(`
                  mutation($projectId: ID!, $public: Boolean!) {
                    updateProjectV2(input: { projectId: $projectId, public: $public }) {
                      projectV2 { id public }
                    }
                  }
                `, { projectId: project.id, public: isPublic });
              }
            } catch (e) {
              core.warning('Skipping visibility update: ' + (e?.message || e));
            }

            // 4) Fetch fields
            const fieldsResp = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        __typename
                        ... on ProjectV2FieldCommon { id name dataType }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { projectId: project.id });
            const existingFields = fieldsResp.node?.fields?.nodes || [];
            const fieldMapping = {};
            for (const f of existingFields) if (f?.name && f?.id) fieldMapping[f.name] = f.id;

            // Helpers to build SINGLE_SELECT options
            const opt = (name, color, description) => ({ name, color, description });
            const gqlOptions = (arr) => arr.map(o => `{name:"${o.name}", color:${o.color}, description:"${o.description}"}`).join(',');

            async function createSingleSelect(name, optionsArr) {
              if (fieldMapping[name]) { console.log(`Field "${name}" exists, skipping`); return; }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(input:{
                    projectId:$projectId,
                    dataType:SINGLE_SELECT,
                    name:"${name}",
                    singleSelectOptions:[${gqlOptions(optionsArr)}]
                  }) {
                    projectV2Field { ... on ProjectV2FieldCommon { id name } }
                  }
                }
              `;
              const r = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = r.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }

            async function ensureSingleSelectOptions(name, optionsArr){
              // If field exists and is SINGLE_SELECT, add any missing options
              const fieldsResp2 = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          __typename
                          ... on ProjectV2SingleSelectField { id name options { id name color description } }
                        }
                      }
                    }
                  }
                }
              `, { projectId: project.id });
              const nodes = fieldsResp2.node?.fields?.nodes || [];
              const f = nodes.find(n => n?.name === name && n.__typename === 'ProjectV2SingleSelectField');
              if (!f) return;
              const existingNames = new Set((f.options||[]).map(o=>o.name));
              const missing = optionsArr.filter(o => !existingNames.has(o.name));
              if (!missing.length) return;
              try {
                const all = [...(f.options||[]).map(o=>({ id:o.id, name:o.name, color:o.color, description:o.description })), ...missing];
                const m = `
                  mutation($projectId: ID!, $fieldId: ID!, $opts: [ProjectV2SingleSelectFieldOptionColor!]!) {
                    updateProjectV2Field(input:{ projectId:$projectId, fieldId:$fieldId, singleSelectOptions:$opts }) { projectV2Field { ... on ProjectV2FieldCommon { id name } } }
                  }
                `;
                await github.graphql(m, { projectId: project.id, fieldId: f.id, opts: all });
                console.log(`Updated options for field "${name}": added ${missing.map(m=>m.name).join(', ')}`);
              } catch (e) {
                core.warning(`Could not update options for '${name}': ${e?.message || e}`);
              }
            }

            async function createTyped(name, dataType) {
              if (fieldMapping[name]) { console.log(`Field "${name}" exists, skipping`); return; }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(input:{ projectId:$projectId, dataType:${dataType}, name:"${name}" }) {
                    projectV2Field { ... on ProjectV2FieldCommon { id name } }
                  }
                }
              `;
              const r = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = r.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }

            // 5) Create fields
            await createSingleSelect('Priority', [
              opt('P0','RED','ðŸš¨ URGENT - Complete within 7 days'),
              opt('P1','ORANGE','âš¡ HIGH PRIORITY - Complete within 30 days'),
              opt('P2','YELLOW','ðŸ“‹ MEDIUM PRIORITY - Complete within 90 days'),
              opt('P3','GREEN','ðŸ”„ PLANNED - Next 6 months')
            ]);

            await createSingleSelect('Area', [
              // 15 Infrastructure Domains from Lead Infrastructure Architect Summary
              opt('Security Layer','PURPLE','Security hardening, auth, rate limiting (3 components)'),
              opt('Monitoring & Observability','BLUE','Metrics, tracing, alerting (8 components)'),
              opt('Performance Optimization','GREEN','Caching, compression, monitoring (7 components)'),
              opt('High Availability','GRAY','Auto-scaling, disaster recovery (6 components)'),
              opt('Compliance & Governance','ORANGE','Audit, privacy, automation (4 components)'),
              opt('API Gateway & Services','CYAN','Orchestration, mesh, docs (4 components)'),
              opt('CI/CD Pipeline','YELLOW','Automated deployment (1 component)'),
              opt('Container Orchestration','GRAY','Docker and Kubernetes infrastructure'),
              opt('Data Management','BLUE','Backup and storage systems'),
              opt('Integration Platform','PINK','Platform, analyzer (2 components)'),
              opt('AI/ML Integration','GREEN','Anomaly detection, analytics, decision support'),
              opt('Executive Dashboard','YELLOW','KPI visualization, reporting engine'),
              opt('Infrastructure Modernization','GRAY','Component upgrades, optimization'),
              opt('Developer Experience','ORANGE','Tools, documentation, automation'),
              opt('Advanced Enterprise','PURPLE','Federation, zero-trust, localization'),
              
              // Legacy categories for backward compatibility
              opt('Equity UI','YELLOW','UI modernization'),
              opt('Docs','GRAY','Documentation'),
              opt('Configuration','GRAY','Configs & env'),
              opt('Testing','YELLOW','Testing & QA'),
              opt('Mobile API','BLUE','Mobile endpoints')
            ]);

            // Ensure critical options exist even on existing boards
            await ensureSingleSelectOptions('Area', [ opt('Infrastructure','GRAY','Infra & platform') ]);

            await createSingleSelect('Phase', [
              // Phase 1 - Foundation (Completed)
              opt('Phase 1','GREEN','Foundation - Security, Observability, Backup (100%)'),
              
              // Phase 2 - Infrastructure Expansion (In Progress)
              opt('Phase 2 W1','BLUE','Docker & Kubernetes (87/100 - 71.3KB)'),
              opt('Phase 2 W2','BLUE','Performance optimization (75/100 - 89.2KB)'),
              opt('Phase 2 W3','GREEN','Advanced monitoring (100/100 - 91.1KB)'),
              opt('Phase 2 W4','GREEN','API Gateway & Management (100/100 - 94.5KB)'),
              opt('Phase 2 W5','YELLOW','High Availability & Resilience (77/100 - 139.7KB)'),
              opt('Phase 2 W6','ORANGE','Compliance & Security Enhancement (67/100 - 145.5KB)'),
              opt('Phase 2 W7','GRAY','AI/ML Integration & Advanced Analytics (Planned - 120-140KB)'),
              opt('Phase 2 W8','GRAY','Executive Dashboard & Advanced Reporting (Planned - 150-170KB)'),
              
              // Phase 3 - Advanced Enterprise Features (Planned)
              opt('Phase 3 Q1','GRAY','Advanced Enterprise Features - Federation, Zero Trust, Localization'),
              opt('Phase 3 Q2','GRAY','AI-Driven Governance - Intelligent Automation, Fairness AI, NLP'),
              opt('Phase 3 Q3','GRAY','Ecosystem Expansion - External Integration, Analytics, Community'),
              opt('Phase 3 Q4','GRAY','Next-Gen Platform - Quantum Security, Edge Computing, Emerging Tech'),
              
              // Maintenance & Modernization Phases
              opt('Infrastructure Modernization','PURPLE','Component upgrades and optimization'),
              opt('Developer Experience','ORANGE','Tools, documentation, automation improvements')
            ]);

            await createSingleSelect('Risk', [
              opt('Low','GREEN','Low risk'),
              opt('Medium','YELLOW','Medium risk'),
              opt('High','RED','High risk')
            ]);

            await createSingleSelect('Status', [
              opt('To Do','GRAY','To do'),
              opt('In Progress','BLUE','In progress'),
              opt('In Review','YELLOW','In review'),
              opt('Blocked','RED','Blocked'),
              opt('Done','GREEN','Done'),
              opt('Testing','PURPLE','Testing phase'),
              opt('Deployed','CYAN','Deployed to production')
            ]);

            // New enhanced fields for enterprise tracking
            await createSingleSelect('Component', [
              // Security Layer (3 components)
              opt('Security Hardening','PURPLE','Enhanced security measures and threat detection'),
              opt('Authentication','PURPLE','User authentication and authorization'),
              opt('Rate Limiting','PURPLE','API rate limiting and throttling'),
              
              // Monitoring & Observability (8 components)
              opt('Metrics Collection','BLUE','System metrics and performance monitoring'),
              opt('Distributed Tracing','BLUE','Request tracing across services'),
              opt('Alerting System','BLUE','Alert management and notification'),
              opt('Log Aggregation','BLUE','Centralized log collection and analysis'),
              opt('Health Monitoring','BLUE','Component health and status monitoring'),
              opt('Anomaly Detection','BLUE','AI-powered anomaly detection'),
              opt('Performance Dashboards','BLUE','Real-time performance visualization'),
              opt('Error Tracking','BLUE','Error collection and analysis'),
              
              // Performance Optimization (7 components)
              opt('Caching Layer','GREEN','Multi-level caching strategy'),
              opt('Content Compression','GREEN','Response compression optimization'),
              opt('Database Optimization','GREEN','Query and index optimization'),
              opt('Load Balancing','GREEN','Traffic distribution optimization'),
              opt('CDN Integration','GREEN','Content delivery network'),
              opt('Resource Optimization','GREEN','CPU, memory, and I/O optimization'),
              opt('Performance Testing','GREEN','Load and stress testing'),
              
              // High Availability (6 components)
              opt('Auto Scaling','GRAY','Automatic horizontal/vertical scaling'),
              opt('Disaster Recovery','GRAY','Backup and recovery procedures'),
              opt('Failover Systems','GRAY','Automatic failover mechanisms'),
              opt('Multi-Region Deployment','GRAY','Geographic distribution'),
              opt('Circuit Breakers','GRAY','Service protection patterns'),
              opt('Health Checks','GRAY','Service health validation'),
              
              // Compliance & Governance (4 components)
              opt('Audit Trail','ORANGE','Comprehensive audit logging'),
              opt('Privacy Management','ORANGE','Data privacy and protection'),
              opt('Compliance Automation','ORANGE','Automated compliance checking'),
              opt('Policy Enforcement','ORANGE','Governance policy automation'),
              
              // API Gateway & Services (4 components)
              opt('API Gateway','CYAN','Unified API access point'),
              opt('Service Mesh','CYAN','Inter-service communication'),
              opt('API Documentation','CYAN','Auto-generated API docs'),
              opt('Service Discovery','CYAN','Dynamic service registration'),
              
              // Infrastructure Components
              opt('CI/CD Pipeline','YELLOW','Automated deployment pipeline'),
              opt('Container Orchestration','GRAY','Docker and Kubernetes'),
              opt('Data Management','BLUE','Backup and storage systems'),
              opt('Integration Platform','PINK','Cross-component integration'),
              
              // Enterprise Features
              opt('Executive Dashboard','YELLOW','Leadership KPI visualization'),
              opt('Advanced Reporting','YELLOW','Automated report generation'),
              opt('AI/ML Engine','GREEN','Machine learning capabilities'),
              opt('Federation Support','PURPLE','Multi-organization governance'),
              
              // UI/UX Components
              opt('Equity UI v2','YELLOW','Modern frontend dashboard'),
              opt('Mobile Interface','YELLOW','Mobile-responsive design'),
              opt('Accessibility Framework','YELLOW','WCAG compliance implementation')
            ]);

            await createSingleSelect('Team Assignment', [
              // Core Infrastructure Team
              opt('Lead Infrastructure Architect','PURPLE','System design and integration'),
              opt('Backend Systems Developer','BLUE','APIs, databases, core services'),
              opt('DevOps Engineer','ORANGE','Deployment, monitoring, automation'),
              opt('Security Specialist','RED','Security hardening and compliance'),
              opt('Quality Assurance Engineer','GREEN','Testing and validation'),
              
              // Frontend & Experience Team
              opt('Frontend Lead','YELLOW','UI/UX development and modernization'),
              opt('UX/UI Designer','YELLOW','User experience optimization'),
              opt('Accessibility Specialist','YELLOW','Inclusive design and WCAG compliance'),
              
              // Data & Analytics Team
              opt('Data Engineer','CYAN','Analytics pipelines and processing'),
              opt('ML Engineer','CYAN','AI/ML integration and models'),
              opt('Business Intelligence','CYAN','Reporting and dashboard development'),
              
              // External/Unassigned
              opt('External Consultant','GRAY','External specialist or consultant'),
              opt('Community Contributor','GREEN','Community member contribution'),
              opt('Unassigned','GRAY','Not yet assigned to team member')
            ]);

            await createSingleSelect('Health Score', [
              opt('100/100','GREEN','Complete - Production ready'),
              opt('90-99/100','GREEN','Nearly complete - Minor polish needed'),
              opt('75-89/100','BLUE','Substantial progress - On track'),
              opt('50-74/100','YELLOW','Moderate progress - Some concerns'),
              opt('25-49/100','ORANGE','Limited progress - Needs attention'),
              opt('0-24/100','RED','Minimal progress - Requires intervention'),
              opt('Not Applicable','GRAY','Health scoring not applicable')
            ]);

            await createSingleSelect('Implementation Size', [
              opt('< 10KB','GREEN','Small component or feature'),
              opt('10-25KB','GREEN','Medium component'),
              opt('25-50KB','BLUE','Large component'),
              opt('50-100KB','YELLOW','Very large component'),
              opt('100KB+','ORANGE','Major infrastructure component'),
              opt('Enterprise Scale','RED','Multi-component system'),
              opt('Not Applicable','GRAY','Size not applicable')
            ]);

            await createSingleSelect('Iteration', [
              opt('Sprint 1','BLUE','Week 1-2 iteration'),
              opt('Sprint 2','BLUE','Week 3-4 iteration'),
              opt('Sprint 3','BLUE','Week 5-6 iteration'),
              opt('Sprint 4','BLUE','Week 7-8 iteration'),
              opt('Sprint 5','BLUE','Week 9-10 iteration'),
              opt('Sprint 6','BLUE','Week 11-12 iteration'),
              opt('Epic','PURPLE','Multi-sprint epic work'),
              opt('Maintenance','GRAY','Ongoing maintenance work'),
              opt('Research','ORANGE','Research and discovery phase')
            ]);

            await createTyped('Start date', 'DATE');
            await createTyped('Target date', 'DATE');
            await createTyped('Estimate (h)', 'NUMBER');
            await createTyped('Owner (text)', 'TEXT');
            await createTyped('Links', 'TEXT');
            await createTyped('Milestone', 'TEXT');
            
            // Enhanced fields for enterprise tracking
            await createTyped('Dependencies', 'TEXT');
            await createTyped('Architecture Impact', 'TEXT');
            await createTyped('Integration Points', 'TEXT');
            await createTyped('Performance Impact', 'TEXT');
            await createTyped('Security Considerations', 'TEXT');
            await createTyped('Documentation Links', 'TEXT');
            await createTyped('Testing Strategy', 'TEXT');
            await createTyped('Rollback Plan', 'TEXT');

            // 6) Upload artifact mapping (best-effort)
            const fs = await import('fs');
            const path = await import('path');
            const artifactDir = path.join(process.env.GITHUB_WORKSPACE || process.cwd(), 'artifacts');
            try {
              await fs.promises.mkdir(artifactDir, { recursive: true });
              const fieldMappingFile = path.join(artifactDir, 'project-fields.json');
              await fs.promises.writeFile(fieldMappingFile, JSON.stringify({
                project_id: project.id,
                project_url: project.url,
                project_title: project.title,
                field_mappings: fieldMapping,
                generated_at: new Date().toISOString()
              }, null, 2));
              console.log('Field mappings saved to artifacts/project-fields.json');
            } catch (error) {
              core.warning('Could not save field mappings artifact: ' + (error?.message || error));
            }

            // 7) Outputs
            core.setOutput('project_url', project.url);
            core.setOutput('project_id', project.id);
            core.setOutput('field_mappings', JSON.stringify(fieldMapping));
      
      - name: Upload project fields artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-fields
          path: artifacts/project-fields.json
          if-no-files-found: warn