name: Setup Project V2

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'User/Org owner (contoh: Andhika-Rey)'
        required: true
        default: 'Andhika-Rey'
      project_title:
        description: 'Judul Project'
        required: true
        default: 'MerajutASA Program Board'
      public:
        description: 'Public? (true/false)'
        required: true
        default: 'false'

jobs:
  create-project:
    runs-on: ubuntu-latest
    steps:
      - name: Create Project V2 and fields
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }} # Classic PAT (repo, project)
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          # Alternatif (tidak disarankan untuk akun personal):
          # permissions di job + github-token: ${{ github.token }}
          script: |
            const ownerLogin = '${{ inputs.owner }}';
            const title = '${{ inputs.project_title }}';
            const isPublic = '${{ inputs.public }}' === 'true';

            // 1) Resolve owner (user atau org) using repositoryOwner to avoid NOT_FOUND errors
            let ownerId, existingProjects;
            
            try {
              const ownerQuery = `
                query($login: String!) {
                  repositoryOwner(login: $login) {
                    id
                    ... on User { 
                      login
                      projectsV2(first: 50) {
                        nodes { id title url public }
                      }
                    }
                    ... on Organization { 
                      login
                      projectsV2(first: 50) {
                        nodes { id title url public }
                      }
                    }
                  }
                }
              `;
              const ownerResp = await github.graphql(ownerQuery, { login: ownerLogin });
              ownerId = ownerResp.repositoryOwner?.id;
              existingProjects = ownerResp.repositoryOwner?.projectsV2?.nodes || [];
            } catch (error) {
              core.warning(`Could not resolve repositoryOwner for ${ownerLogin}: ${error.message}`);
              core.setFailed(`Owner not found: ${ownerLogin}`);
              return;
            }
            
            if (!ownerId) {
              core.setFailed(`Owner not found: ${ownerLogin}`);
              return;
            }

            // 2) Check if project exists (idempotent behavior)
            let project = existingProjects.find(p => p.title === title);
            
            if (project) {
              console.log('Project already exists, reusing:', project);
            } else {
              // Create new project
              const createProjectMutation = `
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {ownerId: $ownerId, title: $title}) {
                    projectV2 { id number title url public }
                  }
                }
              `;
              const createResp = await github.graphql(createProjectMutation, { ownerId, title });
              project = createResp.createProjectV2.projectV2;
              console.log('Project created:', project);
            }

            // 3) Update visibility bila berbeda
            if (project.public !== isPublic) {
              const updateProjectMutation = `
                mutation($projectId: ID!, $public: Boolean!) {
                  updateProjectV2(input: {projectId: $projectId, public: $public}) {
                    projectV2 { id title url public }
                  }
                }
              `;
              await github.graphql(updateProjectMutation, { projectId: project.id, public: isPublic });
            }

            // Get existing fields to avoid duplicates
            const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        id name dataType
                        ... on ProjectV2SingleSelectField { 
                          options { id name } 
                        }
                      }
                    }
                  }
                }
              }
            `;
            const fieldsResp = await github.graphql(fieldsQuery, { projectId: project.id });
            const existingFields = fieldsResp.node.fields.nodes;
            const fieldMapping = {};
            
            // Track existing fields
            for (const field of existingFields) {
              fieldMapping[field.name] = field.id;
            }

            // Helpers membuat fields (idempotent)
            async function createSingleSelect(name, options) {
              if (fieldMapping[name]) {
                console.log(`Field "${name}" already exists, skipping`);
                return;
              }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(
                    input: {
                      projectId: $projectId,
                      dataType: SINGLE_SELECT,
                      name: "${name}",
                      singleSelectOptions: [${options.map(o => `{name:"${o}"}`).join(',')}]
                    }
                  ) { projectV2Field { id name } }
                }
              `;
              const result = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = result.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }
            async function createDate(name) {
              if (fieldMapping[name]) {
                console.log(`Field "${name}" already exists, skipping`);
                return;
              }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(input: {
                    projectId: $projectId, dataType: DATE, name: "${name}"
                  }) { projectV2Field { id name } }
                }
              `;
              const result = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = result.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }
            async function createNumber(name) {
              if (fieldMapping[name]) {
                console.log(`Field "${name}" already exists, skipping`);
                return;
              }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(input: {
                    projectId: $projectId, dataType: NUMBER, name: "${name}"
                  }) { projectV2Field { id name } }
                }
              `;
              const result = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = result.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }
            async function createText(name) {
              if (fieldMapping[name]) {
                console.log(`Field "${name}" already exists, skipping`);
                return;
              }
              const m = `
                mutation($projectId: ID!) {
                  createProjectV2Field(input: {
                    projectId: $projectId, dataType: TEXT, name: "${name}"
                  }) { projectV2Field { id name } }
                }
              `;
              const result = await github.graphql(m, { projectId: project.id });
              fieldMapping[name] = result.createProjectV2Field.projectV2Field.id;
              console.log(`Created field "${name}"`);
            }

            // 4) Field custom (selaras docs/analysis & docs/roadmap)
            await createSingleSelect('Priority', ['P0','P1','P2','P3']);
            await createSingleSelect('Area', [
              'Security','Compliance','Observability','Performance','High Availability',
              'API Gateway','Equity UI','Docs','CI/CD','Configuration',
              'Logging','Error Handling','Testing','Backup','Load Testing',
              'Security Audit','Data Pipeline','Mobile API','Integration'
            ]);
            await createSingleSelect('Phase', [
              'Phase 1','Phase 2 W1','Phase 2 W2','Phase 2 W3','Phase 2 W4','Phase 2 W5','Phase 2 W6',
              'Phase 2 W7','Phase 2 W8','Phase 3 Q1','Phase 3 Q2','Phase 3 Q3','Phase 3 Q4'
            ]);
            await createSingleSelect('Risk', ['Low','Medium','High']);
            await createSingleSelect('Status', ['To Do','In Progress','In Review','Blocked','Done']);
            await createDate('Start date');
            await createDate('Target date');
            await createNumber('Estimate (h)');
            await createText('Owner (text)');
            await createText('Links');
            await createText('Milestone');

            // 5) Upload artifact with field mappings for debugging
            const fs = await import('fs');
            const path = await import('path');
            const artifactDir = path.join(process.env.GITHUB_WORKSPACE || process.cwd(), 'artifacts');
            try {
              await fs.promises.mkdir(artifactDir, { recursive: true });
              const fieldMappingFile = path.join(artifactDir, 'project-fields.json');
              await fs.promises.writeFile(fieldMappingFile, JSON.stringify({
                project_id: project.id,
                project_url: project.url,
                project_title: project.title,
                field_mappings: fieldMapping,
                generated_at: new Date().toISOString()
              }, null, 2));
              console.log('Field mappings saved to artifacts/project-fields.json');
            } catch (error) {
              console.warn('Could not save field mappings artifact:', error.message);
            }

            // Set outputs using GitHub Actions
            core.setOutput('project_url', project.url);
            core.setOutput('project_id', project.id);
            core.setOutput('field_mappings', JSON.stringify(fieldMapping));
            console.log('Project URL:', project.url);
            console.log('Project ID:', project.id);
            console.log('Field mappings:', fieldMapping);
      
      - name: Upload project fields artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-fields
          path: artifacts/project-fields.json
          if-no-files-found: warn