name: Copilot Sub-issue Assigner

on:
  schedule:
    - cron: '*/20 * * * *'
  workflow_dispatch: {}

concurrency:
  group: copilot-assigner-singleton
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  assign-next:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Show gh version (preinstalled)
        run: |
          gh --version

      - name: Read config
        id: cfg
        run: |
          cat .github/copilot-orchestrator.json
          echo "ASSIGNEE=$(jq -r '.assignee' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT
          echo "LABEL_INPROG=$(jq -r '.labels.inProgress' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT
          echo "LABEL_DONE=$(jq -r '.labels.done' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT
          echo "SEQ_MODE=$(jq -r '.sequence.mode // ""' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT
          echo "EPIC_NUM=$(jq -r '.sequence.epic // ""' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT
          echo "ORDER=$(jq -c '.sequence.order // []' .github/copilot-orchestrator.json)" >> $GITHUB_OUTPUT

      - name: Find in-progress issues (scoped to order/epic if configured)
        id: inprog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.cfg.outputs.SEQ_MODE }}" = "explicit" ] && [ "${{ steps.cfg.outputs.ORDER }}" != "[]" ]; then
            printf "%s" '${{ steps.cfg.outputs.ORDER }}' | jq -r '.[]' > order.txt
            gh issue list --label "${{ steps.cfg.outputs.LABEL_INPROG }}" --state open --json number | jq -r '.[].number' > inprog_all.txt
            COUNT=$(grep -Fx -f order.txt inprog_all.txt | wc -l | tr -d '[:space:]')
            echo "COUNT=$COUNT" >> $GITHUB_OUTPUT
          elif [ "${{ steps.cfg.outputs.SEQ_MODE }}" = "epic-body" ] && [ -n "${{ steps.cfg.outputs.EPIC_NUM }}" ]; then
            # Build the ordered list of issue numbers from the epic body
            gh api repos/${GITHUB_REPOSITORY}/issues/${{ steps.cfg.outputs.EPIC_NUM }} --jq '.body' > epic.md
            awk 'match($0, /#([0-9]+)/, m){print m[1]}' epic.md | awk '!seen[$0]++' > order.txt || true
            gh issue list --label "${{ steps.cfg.outputs.LABEL_INPROG }}" --state open --json number | jq -r '.[].number' > inprog_all.txt
            COUNT=$(grep -Fx -f order.txt inprog_all.txt | wc -l | tr -d '[:space:]')
            echo "COUNT=$COUNT" >> $GITHUB_OUTPUT
          else
            gh issue list --label "${{ steps.cfg.outputs.LABEL_INPROG }}" --state open --json number | tee inprog.json
            echo "COUNT=$(jq 'length' inprog.json)" >> $GITHUB_OUTPUT
          fi

      - name: Exit if something in progress
        if: ${{ steps.inprog.outputs.COUNT != '0' }}
        run: |
          echo "An issue is already in progress; skipping assignment."

      - name: Find next unassigned open sub-issue (top-down)
        if: ${{ steps.inprog.outputs.COUNT == '0' }}
        id: next
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.cfg.outputs.SEQ_MODE }}" = "explicit" ] && [ "${{ steps.cfg.outputs.ORDER }}" != "[]" ]; then
            printf "%s" '${{ steps.cfg.outputs.ORDER }}' | jq -r '.[]' > order.txt
            : > next.json
            while read n; do
              [ -z "$n" ] && continue
              gh issue view "$n" --json number,state,isPullRequest,assignees,labels 2>/dev/null \
                | jq 'select(.isPullRequest==false and .state=="OPEN" and ((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_INPROG }}'"))|not) and ((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_DONE }}'"))|not) and ((.labels|map(.name)|index("copilot:blocked"))|not))' \
                > cand.json || true
              if [ -s cand.json ]; then
                cp cand.json next.json
                break
              fi
            done < order.txt
            echo "NUM=$(jq -r '.number // ""' next.json 2>/dev/null)" >> $GITHUB_OUTPUT
          elif [ "${{ steps.cfg.outputs.SEQ_MODE }}" = "epic-body" ] && [ -n "${{ steps.cfg.outputs.EPIC_NUM }}" ]; then
            gh api repos/${GITHUB_REPOSITORY}/issues/${{ steps.cfg.outputs.EPIC_NUM }} --jq '.body' > epic.md
            awk 'match($0, /#([0-9]+)/, m){print m[1]}' epic.md | awk '!seen[$0]++' > order.txt || true
            : > next.json
            while read n; do
              [ -z "$n" ] && continue
              [ "$n" = "${{ steps.cfg.outputs.EPIC_NUM }}" ] && continue
              gh issue view "$n" --json number,state,isPullRequest,assignees,labels 2>/dev/null \
                | jq 'select(.isPullRequest==false and .state=="OPEN" and ((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_INPROG }}'"))|not) and ((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_DONE }}'"))|not) and ((.labels|map(.name)|index("copilot:blocked"))|not))' \
                > cand.json || true
              if [ -s cand.json ]; then
                cp cand.json next.json
                break
              fi
            done < order.txt
            echo "NUM=$(jq -r '.number // ""' next.json 2>/dev/null)" >> $GITHUB_OUTPUT
          else
            # Fallback: numeric order across all issues
            gh issue list --state open --json number,title,labels,assignees \
              | jq '[.[]
                  | select((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_INPROG }}'"))|not)
                  | select((.labels|map(.name)|index("'${{ steps.cfg.outputs.LABEL_DONE }}'"))|not)
                  | select((.labels|map(.name)|index("copilot:blocked"))|not)
                ] | sort_by(.number) | .[0] // {}' | tee next.json
            echo "NUM=$(jq -r '.number // ""' next.json)" >> $GITHUB_OUTPUT
          fi

      - name: Assign to Copilot and mark in-progress
        if: ${{ steps.next.outputs.NUM != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          n='${{ steps.next.outputs.NUM }}'
          gh issue edit "$n" --add-assignee '${{ steps.cfg.outputs.ASSIGNEE }}' || echo "Assignee add failed (likely not assignable); continuing"
          gh label create '${{ steps.cfg.outputs.LABEL_INPROG }}' --color 1f6feb --description "Being worked by Copilot" || true
          gh issue edit "$n" --add-label '${{ steps.cfg.outputs.LABEL_INPROG }}'
          gh issue comment "$n" --body "AI run started: marking as in-progress by Copilot orchestrator."
          echo "Assigned issue #$n to ${{ steps.cfg.outputs.ASSIGNEE }} and marked in-progress."
