openapi: "3.0.0"
info:
  title: "MerajutASA.id API"
  version: "1.0.0"
  description: "Enterprise API for MerajutASA.id governance and integrity platform"
  contact:
    name: "MerajutASA.id API Team"
    email: "api@merajutasa.id"
    url: "https://merajutasa.id"
  license:
    name: "UNLICENSED"
    url: "https://merajutasa.id/license"
servers:
  -
    url: "http://localhost:8080"
    description: "Development"
  -
    url: "https://api.merajutasa.id"
    description: "Production"
paths:
  /api/v1/signer/pubkey:
    get:
      summary: "Get signer public key"
      description: "Retrieve the public key used for digital signing"
      tags:
        - Signer
      responses:
        200:
          description: "Public key retrieved successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  publicKeyPem:
                    type: "string"
                    description: "PEM-formatted public key"
                  algorithm:
                    type: "string"
                    example: "RS256"
                  keyId:
                    type: "string"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /api/v1/signer/sign:
    post:
      summary: "Sign a payload"
      description: "Create a digital signature for the provided payload"
      tags:
        - Signer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - payload
              properties:
                payload:
                  type: "string"
                  description: "Data to be signed (base64 encoded)"
                format:
                  type: "string"
                  enum:
                    - base64
                    - hex
                  default: "base64"
      responses:
        200:
          description: "Signature created successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  canonical:
                    type: "string"
                    description: "Canonical representation"
                  hash_sha256:
                    type: "string"
                    description: "SHA-256 hash"
                  signature:
                    type: "string"
                    description: "Digital signature"
                  timestamp:
                    type: "string"
                    format: "date-time"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /api/v1/chain/append:
    post:
      summary: "Append to integrity chain"
      description: "Add a new entry to the integrity chain"
      tags:
        - Chain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - canonical
                - signature
                - publicKeyPem
              properties:
                canonical:
                  type: "string"
                  description: "Canonical data"
                signature:
                  type: "string"
                  description: "Digital signature"
                publicKeyPem:
                  type: "string"
                  description: "Public key in PEM format"
      responses:
        200:
          description: "Entry appended successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  entryId:
                    type: "string"
                  blockHeight:
                    type: "integer"
                  hash:
                    type: "string"
                  timestamp:
                    type: "string"
                    format: "date-time"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /api/v1/chain/head:
    get:
      summary: "Get chain head"
      description: "Retrieve the latest chain entry"
      tags:
        - Chain
      responses:
        200:
          description: "Chain head retrieved successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  height:
                    type: "integer"
                  hash:
                    type: "string"
                  prevHash:
                    type: "string"
                  timestamp:
                    type: "string"
                    format: "date-time"
                  entries:
                    type: "integer"
                    description: "Total entries in chain"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /api/v1/collector/ingest:
    post:
      summary: "Ingest event data"
      description: "Submit event data for processing and analysis"
      tags:
        - Collector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - event_type
                - data
              properties:
                event_type:
                  type: "string"
                  enum:
                    - user_action
                    - system_event
                    - governance_action
                  description: "Type of event being submitted"
                data:
                  type: "object"
                  description: "Event payload data"
                metadata:
                  type: "object"
                  properties:
                    source:
                      type: "string"
                    version:
                      type: "string"
                    correlation_id:
                      type: "string"
      responses:
        200:
          description: "Event ingested successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event_id:
                    type: "string"
                  event_hash:
                    type: "string"
                  processed_at:
                    type: "string"
                    format: "date-time"
                  status:
                    type: "string"
                    enum:
                      - accepted
                      - processed
                      - rejected
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /health:
    get:
      summary: "Gateway health check"
      description: "Check the health status of the API gateway"
      tags:
        - Management
      responses:
        200:
          description: "Gateway is healthy"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    enum:
                      - healthy
                      - degraded
                  version:
                    type: "string"
                  uptime:
                    type: "integer"
                    description: "Uptime in milliseconds"
                  services:
                    type: "array"
                    items:
                      type: "string"
                    description: "List of registered services"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /metrics:
    get:
      summary: "Gateway metrics"
      description: "Retrieve operational metrics from the API gateway"
      tags:
        - Management
      responses:
        200:
          description: "Metrics retrieved successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  gateway:
                    type: "object"
                    properties:
                      requests:
                        type: "integer"
                      errors:
                        type: "integer"
                      errorRate:
                        type: "number"
                      avgLatency:
                        type: "number"
                      p95Latency:
                        type: "number"
                      p99Latency:
                        type: "number"
                  services:
                    type: "object"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
  /services:
    get:
      summary: "List available services"
      description: "Get information about all registered microservices"
      tags:
        - Management
      responses:
        200:
          description: "Services list retrieved successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  services:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        name:
                          type: "string"
                        version:
                          type: "string"
                        endpoint:
                          type: "string"
                        health:
                          type: "string"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/RateLimitExceeded"
        500:
          $ref: "#/components/responses/Error"
components:
  schemas:
    ErrorResponse:
      type: "object"
      required:
        - error
        - requestId
      properties:
        error:
          type: "string"
          description: "Error message"
        requestId:
          type: "string"
          description: "Unique request identifier"
        timestamp:
          type: "string"
          format: "date-time"
        details:
          type: "object"
          description: "Additional error details"
    SuccessResponse:
      type: "object"
      required:
        - status
      properties:
        status:
          type: "string"
          enum:
            - success
        data:
          type: "object"
          description: "Response data"
        requestId:
          type: "string"
        timestamp:
          type: "string"
          format: "date-time"
    PaginationMeta:
      type: "object"
      properties:
        page:
          type: "integer"
          minimum: 1
        limit:
          type: "integer"
          minimum: 1
          maximum: 100
        total:
          type: "integer"
          minimum: 0
        totalPages:
          type: "integer"
          minimum: 0
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
  responses:
    Error:
      description: "Error response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              error:
                type: "string"
              requestId:
                type: "string"
              timestamp:
                type: "string"
                format: "date-time"
    Unauthorized:
      description: "Authentication required"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
              requestId:
                type: "string"
    RateLimitExceeded:
      description: "Rate limit exceeded"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Too many requests"
              retryAfter:
                type: "integer"
                example: 900
security:
  -
    BearerAuth:
  -
    ApiKeyAuth:
