# MerajutASA.id Development Environment
# Docker Compose configuration for local development

services:
  # Core Services
  signer:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.signer
    container_name: merajutasa-signer-dev
    ports:
      - "${SIGNER_PORT:-4601}:4601"
    environment:
      - NODE_ENV=development
      - SIGNER_PORT=${SIGNER_PORT:-4601}
      - SIGNER_HOST=${SIGNER_HOST:-0.0.0.0}
      - DEBUG=merajutasa:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4601/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  chain:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.chain
    container_name: merajutasa-chain-dev
    ports:
      - "${CHAIN_PORT:-4602}:4602"
    environment:
      - NODE_ENV=development
      - CHAIN_PORT=${CHAIN_PORT:-4602}
      - CHAIN_HOST=${CHAIN_HOST:-0.0.0.0}
      - CHAIN_DATA_DIR=${CHAIN_DATA_DIR:-/app/artifacts}
      - DEBUG=merajutasa:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - chain_data:/app/artifacts
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4602/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  collector:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.collector
    container_name: merajutasa-collector-dev
    ports:
      - "${COLLECTOR_PORT:-4603}:4603"
    environment:
      - NODE_ENV=development
      - COLLECTOR_PORT=${COLLECTOR_PORT:-4603}
      - COLLECTOR_HOST=${COLLECTOR_HOST:-0.0.0.0}
      - EVENTS_DATA_DIR=${EVENTS_DATA_DIR:-/app/data}
      - DEBUG=merajutasa:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - collector_data:/app/data
      - ../../schemas:/app/schemas:ro
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4603/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  monitoring:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.monitoring
    container_name: merajutasa-monitoring-dev
    ports:
      - "4604:4604"
    environment:
      - NODE_ENV=development
      - MONITORING_PORT=4604
      - MONITORING_HOST=0.0.0.0
      - METRICS_DIR=/app/metrics
      - LOGS_DIR=/app/logs
      - DEBUG=merajutasa:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - monitoring_metrics:/app/metrics
      - monitoring_logs:/app/logs
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4604/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  backup:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.backup
    container_name: merajutasa-backup-dev
    environment:
      - NODE_ENV=development
      - BACKUP_PORT=4605
      - BACKUP_HOST=0.0.0.0
      - BACKUP_DIR=/app/backups
      - BACKUP_TEMP_DIR=/app/temp
      - DEBUG=merajutasa:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - backup_storage:/app/backups
      - backup_temp:/app/temp
      - chain_data:/app/artifacts:ro  # Access to chain data for backup
    networks:
      - merajutasa-network
    restart: unless-stopped
    depends_on:
      - chain
      - signer
      - collector

  # High Availability Orchestrator (Week 5)
  ha-orchestrator:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.ha-orchestrator
    container_name: merajutasa-ha-orchestrator-dev
    ports:
      - "${HA_ORCHESTRATOR_PORT:-8090}:8090"
    environment:
      - NODE_ENV=development
      - HA_ORCHESTRATOR_PORT=8090
      - HA_ORCHESTRATOR_HOST=0.0.0.0
      - HA_ORCHESTRATOR_NAME=merajutasa-ha-orchestrator
      - PRIMARY_REGION=${PRIMARY_REGION:-us-east-1}
      - SECONDARY_REGIONS=${SECONDARY_REGIONS:-us-west-2,eu-west-1}
      - DEPLOYMENT_STRATEGY=${DEPLOYMENT_STRATEGY:-blue-green}
      - AUTO_SCALING_MIN_INSTANCES=${AUTO_SCALING_MIN_INSTANCES:-2}
      - AUTO_SCALING_MAX_INSTANCES=${AUTO_SCALING_MAX_INSTANCES:-20}
      - DEBUG=merajutasa:ha:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Observability Stack (Week 3)
  observability:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.observability
    container_name: merajutasa-observability-dev
    ports:
      - "${OBSERVABILITY_PORT:-8080}:8080"
      - "${METRICS_PORT:-8081}:8081"
      - "${TRACING_PORT:-8082}:8082"
    environment:
      - NODE_ENV=development
      - OBSERVABILITY_PORT=8080
      - METRICS_PORT=8081
      - TRACING_PORT=8082
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - DEBUG=merajutasa:observability:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - observability_data:/app/data
    networks:
      - merajutasa-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # API Gateway (Week 4)
  api-gateway:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.api-gateway
    container_name: merajutasa-api-gateway-dev
    ports:
      - "${API_GATEWAY_PORT:-8086}:8086"
    environment:
      - NODE_ENV=development
      - API_GATEWAY_PORT=8086
      - API_GATEWAY_HOST=0.0.0.0
      - SIGNER_URL=http://signer:4601
      - CHAIN_URL=http://chain:4602
      - COLLECTOR_URL=http://collector:4603
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - DEBUG=merajutasa:gateway:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
    networks:
      - merajutasa-network
    restart: unless-stopped
    depends_on:
      - signer
      - chain
      - collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Compliance Orchestrator (Week 6)
  compliance:
    build:
      context: ../..
      dockerfile: infrastructure/docker/services/Dockerfile.compliance
    container_name: merajutasa-compliance-dev
    ports:
      - "${COMPLIANCE_ORCHESTRATOR_PORT:-9000}:9000"
      - "${AUDIT_SYSTEM_PORT:-9001}:9001"
    environment:
      - NODE_ENV=development
      - COMPLIANCE_ORCHESTRATOR_PORT=9000
      - AUDIT_SYSTEM_PORT=9001
      - COMPLIANCE_ORCHESTRATOR_HOST=0.0.0.0
      - DEBUG=merajutasa:compliance:*
    volumes:
      - ../../:/app:ro
      - node_modules:/app/node_modules
      - compliance_data:/app/compliance_data
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Cache (Performance enhancement)
  redis:
    image: redis:7-alpine
    container_name: merajutasa-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - merajutasa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  reverse-proxy:
    image: nginx:alpine
    container_name: merajutasa-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../configs/nginx-docker.conf:/etc/nginx/nginx.conf:ro
      - ../../infrastructure/reverse-proxy/certs:/etc/nginx/certs:ro
    networks:
      - merajutasa-network
    restart: unless-stopped
    depends_on:
      - signer
      - chain
      - collector
      - monitoring
      - api-gateway

# Networks
networks:
  merajutasa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  node_modules:
    driver: local
  chain_data:
    driver: local
  collector_data:
    driver: local
  monitoring_metrics:
    driver: local
  monitoring_logs:
    driver: local
  backup_storage:
    driver: local
  backup_temp:
    driver: local
  observability_data:
    driver: local
  compliance_data:
    driver: local
  redis_data:
    driver: local